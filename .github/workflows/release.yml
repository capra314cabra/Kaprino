name: Release

on:
  push:
    tags:
      - "*"
    branches:
      - "feature/cd*"

jobs:
  build-sources:
    name: Release for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - windows-latest
          - macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get tag or branch name
        uses: ypicard/get-branch-name-github-action@v1
        id: tag_name

      - name: Add Musl target
        if: matrix.os == 'ubuntu-20.04'
        run: |
          rustup target add x86_64-unknown-linux-musl
          sudo apt-get install musl-tools

      - name: Setup Musl-GCC for building LLVM
        if: matrix.os == 'ubuntu-20.04'
        uses: allenevans/set-env@v2.0.0
        with:
          CXX: musl-g++
          CC: musl-gcc

      - name: Setup GCC for building LLVM
        if: matrix.os == 'macos-latest'
        uses: allenevans/set-env@v2.0.0
        with:
          CXX: g++-8
          CC: gcc-8

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install LLVM on Unix
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-latest'
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/llvm-9.0.1.src.tar.xz
          tar xJf llvm-9.0.1.src.tar.xz
          cd llvm-9.0.1.src
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TOOLS=OFF
          make
          sudo make install

      - name: Install LLVM on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest "https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/llvm-9.0.1.src.tar.xz" -OutFile "llvm-9.0.1.src.tar.xz"
          7z x ./llvm-9.0.1.src.tar.xz
          7z x ./llvm-9.0.1.src.tar
          cd llvm-9.0.1.src
          mkdir build
          cd build
          cmake .. -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TOOLS=OFF
          msbuild ALL_BUILD.vcxproj -p:Configuration=Release
          msbuild INSTALL.vcxproj -p:Configuration=Release

      - name: Build
        run: |
          cargo build --release
        env:
          RUSTUP_TOOLCHAIN: stable

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: kaprino-${{ steps.tag_name.outputs.tag }}-${{ matrix.os }}
          path: ./target/release/**

  docker:
    name: Release Docker image
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get tag or branch name
        uses: ypicard/get-branch-name-github-action@v1
        id: tag_name

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: startsWith(steps.tag_name.outputs.tag, 'v')
        uses: docker/build-push-action@v2
        with:
          tags: |
            kaprino/kaprino:${{ steps.tag_name.outputs.tag }}
            kaprino/kaprino:latest
