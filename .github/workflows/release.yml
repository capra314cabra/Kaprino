name: Release

on:
  push:
    tags:
      - "*"
    branches:
      - "feature/cd*"

jobs:
  build-sources:
    name: Release for ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    continue-on-error: true

    strategy:
      matrix:
        config:
          - { name: "Mac OS", os: macos-latest, cc: "gcc-8", cxx: "g++-8" }
          - { name: "Ubuntu", os: ubuntu-20.04, cc: "/usr/bin/musl-gcc", cxx: "/usr/bin/musl-g++" }
          - { name: "Windows", os: windows-latest, cc: "cl", cxx: "cl" }
        ninja-version:
          - 1.10.0

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get tag or branch name
        id: source_name
        run: |
          echo ::set-output name=tag_name::${GITHUB_REF#refs/*/}
        shell: bash

      - name: Add Musl target
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          rustup target add x86_64-unknown-linux-musl
          sudo apt install -y musl-tools

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@v1.1
        with:
          version: ${{ matrix.ninja-version }}
          dest: ninja

      - name: Add Ninja to PATH
        run: |
          echo "$GITHUB_WORKSPACE/ninja" >> $GITHUB_PATH
        shell: bash

      - name: Download LLVM source on Unix
        if: matrix.config.os == 'ubuntu-20.04' || matrix.config.os == 'macos-latest'
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/llvm-9.0.1.src.tar.xz
          tar xJf llvm-9.0.1.src.tar.xz

      - name: Download LLVM source on Windows
        if: matrix.config.os == 'windows-latest'
        run: |
          Invoke-WebRequest "https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/llvm-9.0.1.src.tar.xz" -OutFile "llvm-9.0.1.src.tar.xz"
          7z x ./llvm-9.0.1.src.tar.xz
          7z x ./llvm-9.0.1.src.tar

      - name: Build and install LLVM
        run: |
          ninja --help
          mkdir build
          cd build
          cmake .. -G Ninja \
            -DCMAKE_C_COMPILER=${CC} \
            -DCMAKE_CXX_COMPILER=${CXX} \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_BUILD_TOOLS=OFF
          cmake --build .
          cmake --install .
        shell: bash
        working-directory: ./llvm-9.0.1.src
        env:
          CC: matrix.config.cc
          CXX: matrix.config.cxx

      - name: Build kaprino
        run: |
          cargo build --release
        env:
          RUSTUP_TOOLCHAIN: stable

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: kaprino-${{ steps.source_name.outputs.tag_name }}-${{ matrix.config.os }}
          path: ./target/release/**

  docker:
    name: Release Docker image
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get tag or branch name
        id: source_name
        run: |
          echo ::set-output name=tag_name::${GITHUB_REF#refs/*/}
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: startsWith(steps.source_name.outputs.tag_name, 'v')
        uses: docker/build-push-action@v2
        with:
          tags: |
            kaprino/kaprino:${{ steps.source_name.outputs.tag_name }}
            kaprino/kaprino:latest
